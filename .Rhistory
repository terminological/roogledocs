echo = TRUE,
collapse = TRUE
)
suppressWarnings(library(tidyverse))
suppressWarnings(library(huxtable))
devtools::load_all("~/Git/roogledocs/")
here::i_am("vignettes/web-only/roogledocs.Rmd")
roogledocs::delete_document("roogledocs-demo",areYouSure = TRUE)
doc = roogledocs::doc_from_template("roogledocs-demo","https://docs.Google.com/document/d/1XnrBgBJFz7jEMYtw3o3YKbOuMdWvUkzIul4hb2B-SC4/edit?usp=sharing")
fs::dir_create(here::here("docs/articles/web-only"))
doc$saveAsPdf(here::here("docs/articles/web-only/example-template-doc.pdf"))
hux = diamonds %>% mutate(colorCat = ifelse(color <= "G", "D-G","G-J")) %>% group_by(cut,colorCat) %>% summarise(
`Size (mean + sd)` = sprintf("%1.2f \u00B1 %1.2f",mean(carat),sd(carat)),
`Cost (mean + sd)` = sprintf("%1.0f \u00B1 %1.0f",mean(price),sd(price))
) %>% huxtable::as_hux() %>%
huxtable::theme_article() %>%
huxtable::set_all_padding(value = 0) %>%
huxtable::merge_repeated_rows()
hux %>% roogledocs::as.long_format_table() %>% doc$updateTable(tableIndex = 1,tableWidthInches = 4)
hux
g = ggplot(diamonds, aes(x=carat,y=price, colour=color))+geom_point()
figure_1 = fs::path(tempdir(),"figure_1_original.png")
ggsave(figure_1, g, width=6, height=3)
# If the first parameter is passed as a variable and no tag is given,
# as in this example the variable name is used as the tag and the image is
# inserted into the document at the location of the tag:
doc$updateTaggedImage(figure_1)
# This is equivalent to:
# doc$updateTaggedImage(figure_1, tagName = "figure_1")
g
g2 = ggplot(diamonds, aes(x=cut,y=price, fill=cut))+
geom_violin(draw_quantiles = c(0.95,0.5,0.05))+
scale_fill_brewer()
filename = tempfile(fileext = ".png")
# ggsave default units is inches:
ggsave(filename, g2, width=4, height=3)
# The figure index has to be calculated with respect to any changes that have
# already been made in the document. In this case inserting figure 1 before
# means this is inserted in the right place, but it is up to the user to make
# sure this is right.
filename %>% doc$updateFigure(figureIndex = 2)
g2
filename %>% doc$updateFigure(figureIndex = 2)
format(Sys.Date(),"%d/%m/%Y") %>% doc$updateTaggedText(tagName = "table_1_update_date")
diamonds_mean_sd = sprintf("%1.1f \u00B1 %1.1f",mean(diamonds$price),sd(diamonds$price))
# if we don't give a specific tag name then the variable name is used:
doc$updateTaggedText(diamonds_mean_sd)
doc$appendText("\nAdding new content\n","HEADING_3")
content = tibble::tribble(
~label, ~link, ~fontName, ~fontFace,
"Roogledocs", "https://terminological.github.io/roogledocs/r-library/docs/", "Courier New", "plain",
" is also able to add text at the end of the document with complex formatting. ", NA, NA, "plain",
"Supporting fonts and font face formatting such as ",  NA, NA, "plain",
"bold, ", NA, NA, "bold",
"italic ", NA, NA, "italic",
"and underlined", NA, NA, "underlined",
" amongst other things.\n\n", NA, NA, "plain"
)
doc$appendFormattedParagraph(content)
content
doc$updateCitations(here::here("vignettes/web-only/test.bib"), "ieee")
doc$appendText("\nAdding new content\n","HEADING_1")
content = tibble::tribble(
~label, ~link, ~fontName, ~fontFace,
"Roogledocs", "https://terminological.github.io/roogledocs/r-library/docs/", "Courier New", "plain",
" is also able to add text at the end of the document with complex formatting. ", NA, NA, "plain",
"Supporting fonts and font face formatting such as ",  NA, NA, "plain",
"bold, ", NA, NA, "bold",
"italic ", NA, NA, "italic",
"and underlined", NA, NA, "underlined",
" amongst other things.\n\n", NA, NA, "plain"
)
doc$appendFormattedParagraph(content)
content
doc$updateCitations(here::here("vignettes/web-only/test.bib"), "ieee")
remove.packages("roogledocs")
devtools::install_local("~/Git/roogledocs")
knitr::opts_chunk$set(
echo = TRUE,
collapse = TRUE
)
suppressWarnings(library(tidyverse))
suppressWarnings(library(huxtable))
devtools::load_all("~/Git/roogledocs/")
here::i_am("vignettes/web-only/roogledocs.Rmd")
# There is a global flag to disable `roogledocs` in case you want to develop and
# test offline.
options('roogledocs.disabled'=FALSE)
# roogledocs stores an authentication token on your local hard drive.
options("roogledocs.tokenDirectory"="~/.roogledocs-test")
roogledocs::delete_document("roogledocs-demo",areYouSure = TRUE)
doc = roogledocs::doc_from_template("roogledocs-demo","https://docs.Google.com/document/d/1XnrBgBJFz7jEMYtw3o3YKbOuMdWvUkzIul4hb2B-SC4/edit?usp=sharing")
fs::dir_create(here::here("docs/articles/web-only"))
doc$saveAsPdf(here::here("docs/articles/web-only/example-template-doc.pdf"))
hux = diamonds %>% mutate(colorCat = ifelse(color <= "G", "D-G","G-J")) %>% group_by(cut,colorCat) %>% summarise(
`Size (mean + sd)` = sprintf("%1.2f \u00B1 %1.2f",mean(carat),sd(carat)),
`Cost (mean + sd)` = sprintf("%1.0f \u00B1 %1.0f",mean(price),sd(price))
) %>% huxtable::as_hux() %>%
huxtable::theme_article() %>%
huxtable::set_all_padding(value = 0) %>%
huxtable::merge_repeated_rows()
hux %>% roogledocs::as.long_format_table() %>% doc$updateTable(tableIndex = 1,tableWidthInches = 4)
hux
hux %>% roogledocs::as.long_format_table() %>% doc$updateTaggedTable(tableWidthInches = 4)
doc$updateTaggedTable(table_1, tableWidthInches = 4)
table_1 = hux %>% roogledocs::as.long_format_table()
doc$updateTaggedTable(table_1, tableWidthInches = 4)
g = ggplot(diamonds, aes(x=carat,y=price, colour=color))+geom_point()
figure_1 = roogledocs::ggplot_to_png(g, width=6, height=3)
# If the first parameter is passed as a variable and no tag is given,
# as in this example the variable name is used as the tag and the image is
# inserted into the document at the location of the tag:
doc$updateTaggedImage(figure_1)
# This is equivalent to:
# doc$updateTaggedImage(figure_1, tagName = "figure_1")
g
g2 = ggplot(diamonds, aes(x=cut,y=price, fill=cut))+
geom_violin(draw_quantiles = c(0.95,0.5,0.05))+
scale_fill_brewer()
filename = roogledocs::ggplot_to_png(g2, width=4, height=3)
# The figure index has to be calculated with respect to any changes that have
# already been made in the document. In this case inserting figure 1 before
# means this is inserted in the right place, but it is up to the user to make
# sure this is right.
filename %>% doc$updateFigure(figureIndex = 2)
g2
ggplot(diamonds, aes(x=cut,y=price, fill=cut))+
geom_violin(draw_quantiles = c(0.95,0.5,0.05))+
scale_fill_brewer()+
theme(axis.text.x = element_text(angle = 30, vjust=0,hjust=1))
ggplot(diamonds, aes(x=cut,y=price, fill=cut))+
geom_violin(draw_quantiles = c(0.95,0.5,0.05))+
scale_fill_brewer()+
theme(axis.text.x = element_text(angle = 15, vjust=1,hjust=1))
g2 = ggplot(diamonds, aes(x=cut,y=price, fill=cut))+
geom_violin(draw_quantiles = c(0.95,0.5,0.05))+
scale_fill_brewer()+
theme(axis.text.x = element_text(angle = 15, vjust=1,hjust=1))
filename = roogledocs::ggplot_to_png(g2, width=, height=3)
g2 = ggplot(diamonds, aes(x=cut,y=price, fill=cut))+
geom_violin(draw_quantiles = c(0.95,0.5,0.05))+
scale_fill_brewer()+
theme(axis.text.x = element_text(angle = 15, vjust=1,hjust=1))
filename = roogledocs::ggplot_to_png(g2, width=4, height=3)
# The figure index has to be calculated with respect to any changes that have
# already been made in the document. In this case inserting figure 1 before
# means this is inserted in the right place, but it is up to the user to make
# sure this is right.
filename %>% doc$updateFigure(figureIndex = 2)
g2
format(Sys.Date(),"%d/%m/%Y") %>% doc$updateTaggedText(tagName = "table_1_update_date")
diamonds_mean_sd = sprintf("%1.1f \u00B1 %1.1f",mean(diamonds$price),sd(diamonds$price))
# if we don't give a specific tag name then the variable name is used:
doc$updateTaggedText(diamonds_mean_sd)
doc$appendText("\nAdding new content\n","HEADING_1")
content = tibble::tribble(
~label, ~link, ~fontName, ~fontFace,
"Roogledocs", "https://terminological.github.io/roogledocs/r-library/docs/", "Courier New", "plain",
" is also able to add text at the end of the document with complex formatting. ", NA, NA, "plain",
"Supporting fonts and font face formatting such as ",  NA, NA, "plain",
"bold, ", NA, NA, "bold",
"italic ", NA, NA, "italic",
"and underlined", NA, NA, "underlined",
" amongst other things.\n\n", NA, NA, "plain"
)
doc$appendFormattedParagraph(content)
content
doc$updateCitations(here::here("vignettes/web-only/test.bib"), "ieee")
doc$saveAsPdf(here::here("docs/articles/web-only/example-after-update.pdf"))
knitr::opts_chunk$set(
echo = TRUE,
collapse = TRUE
)
suppressWarnings(library(tidyverse))
suppressWarnings(library(huxtable))
devtools::load_all("~/Git/roogledocs/")
here::i_am("vignettes/web-only/roogleslides.Rmd")
roogledocs::delete_slides("roogleslides-demo",areYouSure = TRUE)
doc = roogledocs::slides_from_template(
"roogleslides-demo",
"https://docs.google.com/presentation/d/18jqzzDI1zBruO3Rc0RlzX_rxhsDiOuKbTM4vnwuimn4/edit?usp=sharing")
fs::dir_create(here::here("docs/articles/web-only"))
doc$saveAsPdf(here::here("docs/articles/web-only/example-template-slides.pdf"))
hux = diamonds %>% mutate(colorCat = ifelse(color <= "G", "D-G","G-J")) %>% group_by(cut,colorCat) %>% summarise(
`Size (mean + sd)` = sprintf("%1.2f \u00B1 %1.2f",mean(carat),sd(carat)),
`Cost (mean + sd)` = sprintf("%1.0f \u00B1 %1.0f",mean(price),sd(price))
) %>% huxtable::as_hux() %>%
huxtable::theme_article() %>%
huxtable::set_all_padding(value = 0) %>%
huxtable::merge_repeated_rows()
hux %>% roogledocs::as.long_format_table() %>% doc$updateTaggedTable(tagName = "diamonds-tag" )
hux
dim = doc$slideDimensions()
g = ggplot(diamonds, aes(x=carat,y=price, colour=color))+geom_point()
figure_1 = ggplot_to_png(g, width=dim$width, height=dim$height)
# If the first parameter is passed as a variable and no tag is given,
# as in this example the variable name is used as the tag and the image is
# inserted into the document at the location of the tag:
doc$updateTaggedImage(figure_1)
# This is equivalent to:
# doc$updateTaggedImage(figure_1, tagName = "figure_1")
g2 = ggplot(diamonds, aes(x=cut,y=price, fill=cut))+
geom_violin(draw_quantiles = c(0.95,0.5,0.05))+
scale_fill_brewer()
figure_2 = ggplot_to_png(g2, width=5, height=4)
doc$updateTaggedImage(figure_2)
format(Sys.Date(),"%d/%m/%Y") %>% doc$updateTaggedText(tagName = "date")
diamonds_mean_sd = sprintf("%1.1f \u00B1 %1.1f",mean(diamonds$price),sd(diamonds$price))
# if we don't give a specific tag name then the variable name is used:
doc$updateTaggedText(diamonds_mean_sd)
content = tibble::tribble(
~label, ~link, ~fontName, ~fontFace,
"Roogledocs", "https://terminological.github.io/roogledocs/r-library/docs/", "Courier New", "plain",
" is also able to add text at the end of the document with complex formatting. ", NA, NA, "plain",
"Supporting fonts and font face formatting such as ",  NA, NA, "plain",
"bold, ", NA, NA, "bold",
"italic ", NA, NA, "italic",
"and underlined", NA, NA, "underlined",
" amongst other things.", NA, NA, "plain"
)
doc$appendFormattedSlide("Adding new content", content)
content
doc$updateCitations(here::here("vignettes/web-only/test.bib"), "ieee")
doc$saveAsPdf(here::here("docs/articles/web-only/slides-after-update.pdf"))
pkgdown::build_site()
remove.packages("roogledocs")
devtools::install_local("~/Git/roogledocs")
pkgdown::build_site()
$stdout
pkgdown::build_site()
?usethis::use_standalone
?devtools::build
tmp = list()
tmp$non()
tmp = structure(list(), class="sink")
$.sink = function(x, y) {
`$`.sink = function(x, y) {
`$.sink` = function(x, y) {
return(NULL)
}
tmp$a
tmp$a = 1
tmp$a
tmp$abc()
`$.sink` = function(x, y) {
return(function(...) NULL)
}
tmp$abc()
tmp$abc
source("~/Git/roogledocs/R/standalone-roogledocs.R")
.roogledoc()
source("~/Git/roogledocs/R/standalone-roogledocs.R")
.roogledoc()
source("~/Git/roogledocs/R/standalone-roogledocs.R")
.roogledoc()
source("~/Git/roogledocs/R/standalone-roogledocs.R")
.roogledoc()
tmp = .roogledoc()
tmp$abc()
class(tmp)
source("~/Git/roogledocs/R/standalone-roogledocs.R")
tmp = .roogledoc()
source("~/Git/roogledocs/R/standalone-roogledocs.R")
tmp = .roogledoc()
docs
supp
docs[[""]]
docs[[1]]
source("~/Git/roogledocs/R/standalone-roogledocs.R")
tmp = .roogledoc()
tmp$asdasda()
tmp$asdasda("a")
source("~/Git/roogledocs/R/standalone-roogledocs.R")
write_value(iris)
xyz = 123
write_value(xyz)
`$.sink` = function(x, y) {
if (is.character(y)) return(NULL)
return(function(...) NULL)
}
tmp$one
tmp$one()
source("~/Git/roogledocs/R/standalone-roogledocs.R")
tmp$one()
tmp$one
ggrrr::outputter()
ggrrr::outputter
source("~/Git/roogledocs/R/standalone-roogledocs.R")
?tempdir
tmp = getOption("roogledoc.local_output", tempdir())
rlang::inform("Local output directed to {tmp}",.frequency = "once",.frequency_id = tmp)
?rlang::inform
rlang::inform(paste0("Local output directed to ",tmp),.frequency = "once",.frequency_id = tmp)
options(roogledoc.local_output = "~/tmp")
tmp = getOption("roogledoc.local_output", tempdir())
rlang::inform(paste0("Local output directed to ",tmp),.frequency = "once",.frequency_id = tmp)
fs::dir_create(tmp)
fs::path(tmp, filename)
filename = "test.tmp"
fs::path(tmp, filename)
fs::path_expand(fs::path(tmp, filename))
tmp = fs::path_expand(getOption("roogledoc.local_output", tempdir()))
rlang::inform(paste0("Local output directed to ",tmp),.frequency = "once",.frequency_id = tmp)
figName = .doc_name(suffix, "png")
options(roogledoc.name = "Test")
figureIndex = 1
supp = FALSE
suffix = if(supp) sprintf("supplementary figure %d", figureIndex) else sprintf("figure %d", figureIndex)
figName = .doc_name(suffix, "png")
.local_output(figName)
source("~/Git/roogledocs/R/standalone-roogledocs.R")
.local_output(figName)
tmp = structure(list(), class="roogledocs_shim")
`$.roogledocs_shim` = function(x, y) {
return(function(...) {
tmp = rlang::list2(...)
if (length(tmp) == 0) return(invisible(NULL))
return(tmp[[1]])
})
}
tmp$test("123")
tmp$test2(123)
tmp$test2()
gd = roogledocs::doc_by_name("Test")
?gd$findOrCreateDocument
?gd
?roogledocs::RoogleDocs
gs = roogledocs::slides_by_name("Test")
source("~/Git/roogledocs/R/standalone-roogledocs.R")
devtools::unload("roogledocs")
remove.packages("roogledocs")
devtools::install_local("~/Git/roogledocs")
?roogledocs::RoogleDocs
gd = roogledocs::doc_by_name("Test")
gd$getName()
remove.packages("roogledocs")
devtools::install_local("~/Git/roogledocs")
gd = roogledocs::doc_by_name("Test")
gd$getName()
gd = roogledocs::doc_by_name("Test")
gd$getName()
source("~/Git/roogledocs/R/standalone-roogledocs.R")
tmp = roogledoc("Test")
devtools::document()
source("~/Git/roogledocs/R/standalone-roogledocs.R")
warnings()
roogledocs::citation_styles()
pkgdown::build_site()
knitr::opts_chunk$set(
echo = TRUE,
collapse = TRUE
)
suppressWarnings(library(tidyverse))
suppressWarnings(library(huxtable))
# devtools::load_all("~/Git/roogledocs/")
here::i_am("vignettes/web-only/roogledocs.Rmd")
knitr::opts_chunk$set(
echo = TRUE,
collapse = TRUE
)
suppressWarnings(library(tidyverse))
suppressWarnings(library(huxtable))
# devtools::load_all("~/Git/roogledocs/")
here::i_am("vignettes/web-only/roogledocs.Rmd")
remove.packages("roogledocs")
devtools::install_local("~/Git/roogledocs",upgrade = FALSE)
knitr::opts_chunk$set(
echo = TRUE,
collapse = TRUE
)
suppressWarnings(library(tidyverse))
suppressWarnings(library(huxtable))
# devtools::load_all("~/Git/roogledocs/")
here::i_am("vignettes/web-only/roogledocs.Rmd")
# There is a global flag to disable `roogledocs` in case you want to develop and
# test offline.
options('roogledocs.disabled'=FALSE)
# roogledocs stores an authentication token on your local hard drive.
options("roogledocs.tokenDirectory"="~/.roogledocs-test")
J = roogledocs::JavaApi$get(logLevel = "DEBUG")
x = J$RoogleDocs$new()
roogledocs::delete_document("roogledocs-demo",areYouSure = TRUE)
roogledocs::reauth()
roogledocs::delete_document("roogledocs-demo",areYouSure = TRUE)
doc = roogledocs::doc_from_template("roogledocs-demo","https://docs.Google.com/document/d/1XnrBgBJFz7jEMYtw3o3YKbOuMdWvUkzIul4hb2B-SC4/edit?usp=sharing")
fs::dir_create(here::here("docs/articles/web-only"))
doc$saveAsPdf(here::here("docs/articles/web-only/example-template-doc.pdf"))
hux = diamonds %>% mutate(colorCat = ifelse(color <= "G", "D-G","G-J")) %>% group_by(cut,colorCat) %>% summarise(
`Size (mean + sd)` = sprintf("%1.2f \u00B1 %1.2f",mean(carat),sd(carat)),
`Cost (mean + sd)` = sprintf("%1.0f \u00B1 %1.0f",mean(price),sd(price))
) %>% huxtable::as_hux() %>%
huxtable::theme_article() %>%
huxtable::set_all_padding(value = 0) %>%
huxtable::merge_repeated_rows()
table_1 = hux %>% roogledocs::as.long_format_table()
doc$updateTaggedTable(table_1, tableWidthInches = 4)
hux
g = ggplot(diamonds, aes(x=carat,y=price, colour=color))+geom_point()
figure_1 = roogledocs::ggplot_to_png(g, width=6, height=3)
# If the first parameter is passed as a variable and no tag is given,
# as in this example the variable name is used as the tag and the image is
# inserted into the document at the location of the tag:
doc$updateTaggedImage(figure_1)
# This is equivalent to:
# doc$updateTaggedImage(figure_1, tagName = "figure_1")
g
g2 = ggplot(diamonds, aes(x=cut,y=price, fill=cut))+
geom_violin(draw_quantiles = c(0.95,0.5,0.05))+
scale_fill_brewer()+
theme(axis.text.x = element_text(angle = 15, vjust=1,hjust=1))
filename = roogledocs::ggplot_to_png(g2, width=4, height=3)
# The figure index has to be calculated with respect to any changes that have
# already been made in the document. In this case inserting figure 1 before
# means this is inserted in the right place, but it is up to the user to make
# sure this is right.
filename %>% doc$updateFigure(figureIndex = 2)
g2
doc$uploadSupplementaryFiles(absoluteFilePath = figure_1,overwrite = TRUE)
doc$tagsDefined()
format(Sys.Date(),"%d/%m/%Y") %>% doc$updateTaggedText(tagName = "table_1_update_date")
diamonds_mean_sd = sprintf("%1.1f \u00B1 %1.1f",mean(diamonds$price),sd(diamonds$price))
# if we don't give a specific tag name then the variable name is used:
doc$updateTaggedText(diamonds_mean_sd)
doc$appendText("\nAdding new content\n","HEADING_1")
content = tibble::tribble(
~label, ~link, ~fontName, ~fontFace,
"Roogledocs", "https://terminological.github.io/roogledocs/r-library/docs/", "Courier New", "plain",
" is also able to add text at the end of the document with complex formatting. ", NA, NA, "plain",
"Supporting fonts and font face formatting such as ",  NA, NA, "plain",
"bold, ", NA, NA, "bold",
"italic ", NA, NA, "italic",
"and underlined", NA, NA, "underlined",
" amongst other things.\n\n", NA, NA, "plain"
)
doc$appendFormattedParagraph(content)
content
doc$updateCitations(here::here("vignettes/web-only/test.bib"), "ieee")
doc$saveAsPdf(here::here("docs/articles/web-only/example-after-update.pdf"))
pkgdown::build_site()
pkgdown::build_home()
pkgdown::build_site()
knitr::opts_chunk$set(
echo = TRUE,
collapse = TRUE
)
suppressWarnings(library(tidyverse))
suppressWarnings(library(huxtable))
# devtools::load_all("~/Git/roogledocs/")
here::i_am("vignettes/web-only/roogleslides.Rmd")
# There is a global flag to disable `roogledocs` in case you want to develop and
# test offline.
options('roogledocs.disabled'=FALSE)
# roogledocs stores an authentication token on your local hard drive.
options("roogledocs.tokenDirectory"="~/.roogledocs-test")
roogledocs::delete_slides("roogleslides-demo",areYouSure = TRUE)
doc = roogledocs::slides_from_template(
"roogleslides-demo",
"https://docs.google.com/presentation/d/18jqzzDI1zBruO3Rc0RlzX_rxhsDiOuKbTM4vnwuimn4/edit?usp=sharing")
fs::dir_create(here::here("docs/articles/web-only"))
doc$saveAsPdf(here::here("docs/articles/web-only/example-template-slides.pdf"))
hux = diamonds %>% mutate(colorCat = ifelse(color <= "G", "D-G","G-J")) %>% group_by(cut,colorCat) %>% summarise(
`Size (mean + sd)` = sprintf("%1.2f \u00B1 %1.2f",mean(carat),sd(carat)),
`Cost (mean + sd)` = sprintf("%1.0f \u00B1 %1.0f",mean(price),sd(price))
) %>% huxtable::as_hux() %>%
huxtable::theme_article() %>%
huxtable::set_all_padding(value = 0) %>%
huxtable::merge_repeated_rows()
hux %>% roogledocs::as.long_format_table() %>% doc$updateTaggedTable(tagName = "diamonds-tag" )
hux
dim = doc$slideDimensions()
g = ggplot(diamonds, aes(x=carat,y=price, colour=color))+geom_point()
figure_1 = roogledocs::ggplot_to_png(g, width=dim$width, height=dim$height)
# If the first parameter is passed as a variable and no tag is given,
# as in this example the variable name is used as the tag and the image is
# inserted into the document at the location of the tag:
doc$updateTaggedImage(figure_1)
# This is equivalent to:
# doc$updateTaggedImage(figure_1, tagName = "figure_1")
g2 = ggplot(diamonds, aes(x=cut,y=price, fill=cut))+
geom_violin(draw_quantiles = c(0.95,0.5,0.05))+
scale_fill_brewer()
figure_2 = roogledocs::ggplot_to_png(g2, width=5, height=4)
doc$updateTaggedImage(figure_2)
doc$tagsDefined()
format(Sys.Date(),"%d/%m/%Y") %>% doc$updateTaggedText(tagName = "date")
diamonds_mean_sd = sprintf("%1.1f \u00B1 %1.1f",mean(diamonds$price),sd(diamonds$price))
# if we don't give a specific tag name then the variable name is used:
doc$updateTaggedText(diamonds_mean_sd)
content = tibble::tribble(
~label, ~link, ~fontName, ~fontFace,
"Roogledocs", "https://terminological.github.io/roogledocs/r-library/docs/", "Courier New", "plain",
" is also able to add text at the end of the document with complex formatting. ", NA, NA, "plain",
"Supporting fonts and font face formatting such as ",  NA, NA, "plain",
"bold, ", NA, NA, "bold",
"italic ", NA, NA, "italic",
"and underlined", NA, NA, "underlined",
" amongst other things.", NA, NA, "plain"
)
doc$appendFormattedSlide("Adding new content", content)
content
doc$updateCitations(here::here("vignettes/web-only/test.bib"), "ieee")
doc$saveAsPdf(here::here("docs/articles/web-only/slides-after-update.pdf"))
pkgdown::build_article("roogleslides")
pkgdown::build_article("web-only/roogleslides.Rmd")
pkgdown::build_article("Using roogledocs for presentations")
pkgdown::build_articles()
?pkgdown::build_article
?pkgdown::build_article("./web-only/roogleslides")
pkgdown::build_article("./web-only/roogleslides")
pkgdown::build_articles(lazy = FALSE)
devtools::install_local()
pkgdown::build_articles(lazy = FALSE)
