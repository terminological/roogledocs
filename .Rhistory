roogledocs::delete_document("roogledocs-demo",areYouSure = TRUE)
?roogledocs::JavaApi
?devtools::install_local
?is_binary_pkg
remotes:::is_binary_pkg
knitr::opts_chunk$set(
echo = TRUE,
collapse = TRUE
)
suppressWarnings(library(tidyverse))
suppressWarnings(library(huxtable))
# devtools::load_all("~/Git/roogledocs/")
here::i_am("vignettes/web-only/roogledocs.Rmd")
remove.packages("roogledocs")
devtools::install_local("~/Git/roogledocs",upgrade = FALSE)
knitr::opts_chunk$set(
echo = TRUE,
collapse = TRUE
)
suppressWarnings(library(tidyverse))
suppressWarnings(library(huxtable))
# devtools::load_all("~/Git/roogledocs/")
here::i_am("vignettes/web-only/roogledocs.Rmd")
# There is a global flag to disable `roogledocs` in case you want to develop and
# test offline.
options('roogledocs.disabled'=FALSE)
# roogledocs stores an authentication token on your local hard drive.
options("roogledocs.tokenDirectory"="~/.roogledocs-test")
J = roogledocs::JavaApi$get(logLevel = "DEBUG")
x = J$RoogleDocs$new()
roogledocs::delete_document("roogledocs-demo",areYouSure = TRUE)
knitr::opts_chunk$set(
echo = TRUE,
collapse = TRUE
)
suppressWarnings(library(tidyverse))
suppressWarnings(library(huxtable))
# devtools::load_all("~/Git/roogledocs/")
here::i_am("vignettes/web-only/roogledocs.Rmd")
# There is a global flag to disable `roogledocs` in case you want to develop and
# test offline.
options('roogledocs.disabled'=FALSE)
# roogledocs stores an authentication token on your local hard drive.
options("roogledocs.tokenDirectory"="~/.roogledocs-test")
J = roogledocs::JavaApi$get(logLevel = "DEBUG")
x = J$RoogleDocs$new()
roogledocs::delete_document("roogledocs-demo",areYouSure = TRUE)
roogledocs::reauth()
knitr::opts_chunk$set(
echo = TRUE,
collapse = TRUE
)
suppressWarnings(library(tidyverse))
suppressWarnings(library(huxtable))
# devtools::load_all("~/Git/roogledocs/")
here::i_am("vignettes/web-only/roogledocs.Rmd")
# There is a global flag to disable `roogledocs` in case you want to develop and
# test offline.
options('roogledocs.disabled'=FALSE)
# roogledocs stores an authentication token on your local hard drive.
options("roogledocs.tokenDirectory"="~/.roogledocs-test")
J = roogledocs::JavaApi$get(logLevel = "DEBUG")
x = J$RoogleDocs$new()
x
doc = roogledocs::doc_from_template("roogledocs-demo","https://docs.Google.com/document/d/1XnrBgBJFz7jEMYtw3o3YKbOuMdWvUkzIul4hb2B-SC4/edit?usp=sharing")
fs::dir_create(here::here("docs/articles/web-only"))
doc$saveAsPdf(here::here("docs/articles/web-only/example-template-doc.pdf"))
doc
hux = diamonds %>% mutate(colorCat = ifelse(color <= "G", "D-G","G-J")) %>% group_by(cut,colorCat) %>% summarise(
`Size (mean + sd)` = sprintf("%1.2f \u00B1 %1.2f",mean(carat),sd(carat)),
`Cost (mean + sd)` = sprintf("%1.0f \u00B1 %1.0f",mean(price),sd(price))
) %>% huxtable::as_hux() %>%
huxtable::theme_article() %>%
huxtable::set_all_padding(value = 0) %>%
huxtable::merge_repeated_rows()
table_1 = hux %>% roogledocs::as.long_format_table()
doc$updateTaggedTable(table_1, tableWidthInches = 4)
hux
doc
roogledocs::delete_document("roogledocs-demo",areYouSure = TRUE)
doc = roogledocs::doc_from_template("roogledocs-demo","https://docs.Google.com/document/d/1XnrBgBJFz7jEMYtw3o3YKbOuMdWvUkzIul4hb2B-SC4/edit?usp=sharing")
fs::dir_create(here::here("docs/articles/web-only"))
doc$saveAsPdf(here::here("docs/articles/web-only/example-template-doc.pdf"))
hux = diamonds %>% mutate(colorCat = ifelse(color <= "G", "D-G","G-J")) %>% group_by(cut,colorCat) %>% summarise(
`Size (mean + sd)` = sprintf("%1.2f \u00B1 %1.2f",mean(carat),sd(carat)),
`Cost (mean + sd)` = sprintf("%1.0f \u00B1 %1.0f",mean(price),sd(price))
) %>% huxtable::as_hux() %>%
huxtable::theme_article() %>%
huxtable::set_all_padding(value = 0) %>%
huxtable::merge_repeated_rows()
table_1 = hux %>% roogledocs::as.long_format_table()
doc$updateTaggedTable(table_1, tableWidthInches = 4)
hux
g = ggplot(diamonds, aes(x=carat,y=price, colour=color))+geom_point()
figure_1 = roogledocs::ggplot_to_png(g, width=6, height=3)
# If the first parameter is passed as a variable and no tag is given,
# as in this example the variable name is used as the tag and the image is
# inserted into the document at the location of the tag:
doc$updateTaggedImage(figure_1)
# This is equivalent to:
# doc$updateTaggedImage(figure_1, tagName = "figure_1")
g
hux = diamonds %>% mutate(colorCat = ifelse(color <= "G", "D-G","G-J")) %>% group_by(cut,colorCat) %>% summarise(
`Size (mean + sd)` = sprintf("%1.2f \u00B1 %1.2f",mean(carat),sd(carat)),
`Cost (mean + sd)` = sprintf("%1.0f \u00B1 %1.0f",mean(price),sd(price))
) %>% huxtable::as_hux() %>%
huxtable::theme_article() %>%
huxtable::set_all_padding(value = 0) %>%
huxtable::merge_repeated_rows()
table_1 = hux %>% roogledocs::as.long_format_table()
doc$updateTaggedTable(table_1, tableWidthInches = 4)
hux
g2 = ggplot(diamonds, aes(x=cut,y=price, fill=cut))+
geom_violin(draw_quantiles = c(0.95,0.5,0.05))+
scale_fill_brewer()+
theme(axis.text.x = element_text(angle = 15, vjust=1,hjust=1))
filename = roogledocs::ggplot_to_png(g2, width=4, height=3)
# The figure index has to be calculated with respect to any changes that have
# already been made in the document. In this case inserting figure 1 before
# means this is inserted in the right place, but it is up to the user to make
# sure this is right.
filename %>% doc$updateFigure(figureIndex = 2)
g2
doc$uploadSupplementaryFiles(absoluteFilePath = figure_1,overwrite = TRUE)
doc$tagsDefined()
format(Sys.Date(),"%d/%m/%Y") %>% doc$updateTaggedText(tagName = "table_1_update_date")
diamonds_mean_sd = sprintf("%1.1f \u00B1 %1.1f",mean(diamonds$price),sd(diamonds$price))
# if we don't give a specific tag name then the variable name is used:
doc$updateTaggedText(diamonds_mean_sd)
doc$appendText("\nAdding new content\n","HEADING_1")
content = tibble::tribble(
~label, ~link, ~fontName, ~fontFace,
"Roogledocs", "https://terminological.github.io/roogledocs/r-library/docs/", "Courier New", "plain",
" is also able to add text at the end of the document with complex formatting. ", NA, NA, "plain",
"Supporting fonts and font face formatting such as ",  NA, NA, "plain",
"bold, ", NA, NA, "bold",
"italic ", NA, NA, "italic",
"and underlined", NA, NA, "underlined",
" amongst other things.\n\n", NA, NA, "plain"
)
doc$appendFormattedParagraph(content)
content
doc$updateCitations(here::here("vignettes/web-only/test.bib"), "ieee")
doc$saveAsPdf(here::here("docs/articles/web-only/example-after-update.pdf"))
knitr::opts_chunk$set(
echo = TRUE,
collapse = TRUE
)
suppressWarnings(library(tidyverse))
suppressWarnings(library(huxtable))
# devtools::load_all("~/Git/roogledocs/")
here::i_am("vignettes/web-only/roogledocs.Rmd")
remove.packages("roogledocs")
devtools::install_local("~/Git/roogledocs",upgrade = FALSE)
# There is a global flag to disable `roogledocs` in case you want to develop and
# test offline.
options('roogledocs.disabled'=FALSE)
# roogledocs stores an authentication token on your local hard drive.
options("roogledocs.tokenDirectory"="~/.roogledocs-test")
J = roogledocs::JavaApi$get(logLevel = "DEBUG")
x = J$RoogleDocs$new()
J = roogledocs::JavaApi$get(logLevel = "WARN")
x = J$RoogleDocs$new()
doc = roogledocs::doc_from_template(
"roogledocs-demo",
"https://docs.Google.com/document/d/1XnrBgBJFz7jEMYtw3o3YKbOuMdWvUkzIul4hb2B-SC4/edit?usp=sharing"
)
fs::dir_create(here::here("docs/articles/web-only"))
doc$saveAsPdf(here::here("docs/articles/web-only/example-template-doc.pdf"))
hux = diamonds %>% mutate(colorCat = ifelse(color <= "G", "D-G","G-J")) %>% group_by(cut,colorCat) %>% summarise(
`Size (mean + sd)` = sprintf("%1.2f \u00B1 %1.2f",mean(carat),sd(carat)),
`Cost (mean + sd)` = sprintf("%1.0f \u00B1 %1.0f",mean(price),sd(price))
) %>% huxtable::as_hux() %>%
huxtable::theme_article() %>%
huxtable::set_all_padding(value = 0) %>%
huxtable::merge_repeated_rows()
table_1 = hux %>% roogledocs::as.long_format_table()
doc$updateTaggedTable(table_1, tableWidthInches = 4)
hux
knitr::opts_chunk$set(
echo = TRUE,
collapse = TRUE
)
suppressWarnings(library(tidyverse))
suppressWarnings(library(huxtable))
# devtools::load_all("~/Git/roogledocs/")
here::i_am("vignettes/web-only/roogledocs.Rmd")
# There is a global flag to disable `roogledocs` in case you want to develop and
# test offline.
options('roogledocs.disabled'=FALSE)
# roogledocs stores an authentication token on your local hard drive.
options("roogledocs.tokenDirectory"="~/.roogledocs-test")
J = roogledocs::JavaApi$get(logLevel = "WARN")
x = J$RoogleDocs$new()
roogledocs::delete_document("roogledocs-demo",areYouSure = TRUE)
doc = roogledocs::doc_from_template(
"roogledocs-demo",
"https://docs.Google.com/document/d/1XnrBgBJFz7jEMYtw3o3YKbOuMdWvUkzIul4hb2B-SC4/edit?usp=sharing"
)
fs::dir_create(here::here("docs/articles/web-only"))
doc$saveAsPdf(here::here("docs/articles/web-only/example-template-doc.pdf"))
hux = diamonds %>% mutate(colorCat = ifelse(color <= "G", "D-G","G-J")) %>% group_by(cut,colorCat) %>% summarise(
`Size (mean + sd)` = sprintf("%1.2f \u00B1 %1.2f",mean(carat),sd(carat)),
`Cost (mean + sd)` = sprintf("%1.0f \u00B1 %1.0f",mean(price),sd(price))
) %>% huxtable::as_hux() %>%
huxtable::theme_article() %>%
huxtable::set_all_padding(value = 0) %>%
huxtable::merge_repeated_rows()
table_1 = hux %>% roogledocs::as.long_format_table()
doc$updateTaggedTable(table_1, tableWidthInches = 4)
hux
g = ggplot(diamonds, aes(x=carat,y=price, colour=color))+geom_point()
figure_1 = roogledocs::ggplot_to_png(g, width=6, height=3)
# If the first parameter is passed as a variable and no tag is given,
# as in this example the variable name is used as the tag and the image is
# inserted into the document at the location of the tag:
doc$updateTaggedImage(figure_1)
# This is equivalent to:
# doc$updateTaggedImage(figure_1, tagName = "figure_1")
g
g2 = ggplot(diamonds, aes(x=cut,y=price, fill=cut))+
geom_violin(draw_quantiles = c(0.95,0.5,0.05))+
scale_fill_brewer()+
theme(axis.text.x = element_text(angle = 15, vjust=1,hjust=1))
filename = roogledocs::ggplot_to_png(g2, width=4, height=3)
# The figure index has to be calculated with respect to any changes that have
# already been made in the document. In this case inserting figure 1 before
# means this is inserted in the right place, but it is up to the user to make
# sure this is right.
filename %>% doc$updateFigure(figureIndex = 2)
g2
doc$tagsDefined()
format(Sys.Date(),"%d/%m/%Y") %>% doc$updateTaggedText(tagName = "table_1_update_date")
diamonds_mean_sd = sprintf("%1.1f \u00B1 %1.1f",mean(diamonds$price),sd(diamonds$price))
# if we don't give a specific tag name then the variable name is used:
doc$updateTaggedText(diamonds_mean_sd)
doc$appendText("\nAdding new content\n","HEADING_1")
content = tibble::tribble(
~label, ~link, ~fontName, ~fontFace,
"Roogledocs", "https://terminological.github.io/roogledocs/r-library/docs/", "Courier New", "plain",
" is also able to add text at the end of the document with complex formatting. ", NA, NA, "plain",
"Supporting fonts and font face formatting such as ",  NA, NA, "plain",
"bold, ", NA, NA, "bold",
"italic ", NA, NA, "italic",
"and underlined", NA, NA, "underlined",
" amongst other things.\n\n", NA, NA, "plain"
)
doc$appendFormattedParagraph(content)
content
doc$updateCitations(here::here("vignettes/web-only/test.bib"), citationStyle = "journal-of-infection")
doc$saveAsPdf(here::here("docs/articles/web-only/example-after-update.pdf"))
knitr::opts_chunk$set(
echo = TRUE,
collapse = TRUE
)
suppressWarnings(library(tidyverse))
suppressWarnings(library(huxtable))
# devtools::load_all("~/Git/roogledocs/")
here::i_am("vignettes/web-only/roogleslides.Rmd")
# There is a global flag to disable `roogledocs` in case you want to develop and
# test offline.
options('roogledocs.disabled'=FALSE)
# roogledocs stores an authentication token on your local hard drive.
options("roogledocs.tokenDirectory"="~/.roogledocs-test")
roogledocs::delete_slides("roogleslides-demo",areYouSure = TRUE)
doc = roogledocs::slides_from_template(
"roogleslides-demo",
"https://docs.google.com/presentation/d/18jqzzDI1zBruO3Rc0RlzX_rxhsDiOuKbTM4vnwuimn4/edit?usp=sharing")
fs::dir_create(here::here("docs/articles/web-only"))
doc$saveAsPdf(here::here("docs/articles/web-only/example-template-slides.pdf"))
hux = diamonds %>% mutate(colorCat = ifelse(color <= "G", "D-G","G-J")) %>% group_by(cut,colorCat) %>% summarise(
`Size (mean + sd)` = sprintf("%1.2f \u00B1 %1.2f",mean(carat),sd(carat)),
`Cost (mean + sd)` = sprintf("%1.0f \u00B1 %1.0f",mean(price),sd(price))
) %>% huxtable::as_hux() %>%
huxtable::theme_article() %>%
huxtable::set_all_padding(value = 0) %>%
huxtable::merge_repeated_rows()
hux %>% roogledocs::as.long_format_table() %>% doc$updateTaggedTable(tagName = "diamonds-tag" )
hux
dim = doc$slideDimensions()
g = ggplot(diamonds, aes(x=carat,y=price, colour=color))+geom_point()
figure_1 = roogledocs::ggplot_to_png(g, width=dim$width, height=dim$height)
# If the first parameter is passed as a variable and no tag is given,
# as in this example the variable name is used as the tag and the image is
# inserted into the document at the location of the tag:
doc$updateTaggedImage(figure_1)
# This is equivalent to:
# doc$updateTaggedImage(figure_1, tagName = "figure_1")
g2 = ggplot(diamonds, aes(x=cut,y=price, fill=cut))+
geom_violin(draw_quantiles = c(0.95,0.5,0.05))+
scale_fill_brewer()
figure_2 = roogledocs::ggplot_to_png(g2, width=5, height=4)
doc$updateTaggedImage(figure_2)
doc$tagsDefined()
format(Sys.Date(),"%d/%m/%Y") %>% doc$updateTaggedText(tagName = "date")
diamonds_mean_sd = sprintf("%1.1f \u00B1 %1.1f",mean(diamonds$price),sd(diamonds$price))
# if we don't give a specific tag name then the variable name is used:
doc$updateTaggedText(diamonds_mean_sd)
content = tibble::tribble(
~label, ~link, ~fontName, ~fontFace,
"Roogledocs", "https://terminological.github.io/roogledocs/r-library/docs/", "Courier New", "plain",
" is also able to add text at the end of the document with complex formatting. ", NA, NA, "plain",
"Supporting fonts and font face formatting such as ",  NA, NA, "plain",
"bold, ", NA, NA, "bold",
"italic ", NA, NA, "italic",
"and underlined", NA, NA, "underlined",
" amongst other things.", NA, NA, "plain"
)
doc$appendFormattedSlide("Adding new content", content)
content
doc$updateCitations(here::here("vignettes/web-only/test.bib"), citationStyle = "journal-of-infection"))
doc$updateCitations(here::here("vignettes/web-only/test.bib"), citationStyle = "journal-of-infection")
doc$saveAsPdf(here::here("docs/articles/web-only/slides-after-update.pdf"))
fs::path("~/tmp")
fs::path(fs::path_home(),"tmp")
devtools::check()
pkgdown::build_home()
devtools::build_site()
?rJava::.jcheck
knitr::opts_chunk$set(
echo = TRUE,
collapse = TRUE
)
suppressWarnings(library(tidyverse))
suppressWarnings(library(huxtable))
# devtools::load_all("~/Git/roogledocs/")
here::i_am("vignettes/web-only/roogledocs.Rmd")
# There is a global flag to disable `roogledocs` in case you want to develop and
# test offline.
options('roogledocs.disabled'=FALSE)
# roogledocs stores an authentication token on your local hard drive.
options("roogledocs.tokenDirectory"="~/.roogledocs-test")
J = roogledocs::JavaApi$get(logLevel = "WARN")
x = J$RoogleDocs$new()
J$RoogleDocs$new
knitr::opts_chunk$set(
echo = TRUE,
collapse = TRUE
)
suppressWarnings(library(tidyverse))
suppressWarnings(library(huxtable))
# devtools::load_all("~/Git/roogledocs/")
here::i_am("vignettes/web-only/roogledocs.Rmd")
remove.packages("roogledocs")
devtools::install_local("~/Git/roogledocs",upgrade = FALSE)
knitr::opts_chunk$set(
echo = TRUE,
collapse = TRUE
)
suppressWarnings(library(tidyverse))
suppressWarnings(library(huxtable))
# devtools::load_all("~/Git/roogledocs/")
here::i_am("vignettes/web-only/roogledocs.Rmd")
# There is a global flag to disable `roogledocs` in case you want to develop and
# test offline.
options('roogledocs.disabled'=FALSE)
# roogledocs stores an authentication token on your local hard drive.
options("roogledocs.tokenDirectory"="~/.roogledocs-test")
J = roogledocs::JavaApi$get(logLevel = "WARN")
x = J$RoogleDocs$new()
traceback()
rJava::jnew
rJava::.jnew
rJava:::new
showMethods(rJava:::new)
rJava:::new.jclassName
knitr::opts_chunk$set(
echo = TRUE,
collapse = TRUE
)
suppressWarnings(library(tidyverse))
suppressWarnings(library(huxtable))
# devtools::load_all("~/Git/roogledocs/")
here::i_am("vignettes/web-only/roogledocs.Rmd")
# There is a global flag to disable `roogledocs` in case you want to develop and
# test offline.
options('roogledocs.disabled'=FALSE)
# roogledocs stores an authentication token on your local hard drive.
options("roogledocs.tokenDirectory"="~/.roogledocs-test")
J = roogledocs::JavaApi$get(logLevel = "WARN")
x = J$RoogleDocs$new()
J$RoogleDocs$new
J = roogledocs::JavaApi$get(logLevel = "WARN")
J$RoogleDocs$new
self=J
J$.toJava$RCharacter
J$RoogleDocs$new
tokenDirectory = .tokenDirectory()
tokenDirectory = roogledocs:::.tokenDirectory()
tokenDirectory
J$RoogleDocs$new
tmp_tokenDirectory = self$.toJava$RCharacter(tokenDirectory)
disabled = FALSE
tmp_tokenDirectory$toString()
tmp_disabled = self$.toJava$RLogical(disabled)
tmp_disabled
self$.toJava$RLogical
class(tmp_disabled)
J$RoogleDocs$new
tmp_out = .jnew("org/github/terminological/roogledocs/RoogleDocs",
tmp_tokenDirectory, tmp_disabled, check = FALSE)
tmp_out = rJava::.jnew("org/github/terminological/roogledocs/RoogleDocs",
tmp_tokenDirectory, tmp_disabled, check = FALSE)
tmp_out
self$printMessages()
.jcheck()
rJava::.jcheck()
tmp_r6 = RoogleDocs$new(tmp_out, self)
tmp_r6 = roogledocs::RoogleDocs$new(tmp_out, self)
tmp_r6
x = J$RoogleDocs$new()
J = roogledocs::JavaApi$get(logLevel = "WARN")
x = J$RoogleDocs$new()
roogledocs::delete_document("roogledocs-demo",areYouSure = TRUE)
doc = roogledocs::doc_from_template(
"roogledocs-demo",
"https://docs.Google.com/document/d/1XnrBgBJFz7jEMYtw3o3YKbOuMdWvUkzIul4hb2B-SC4/edit?usp=sharing"
)
fs::dir_create(here::here("docs/articles/web-only"))
doc$saveAsPdf(here::here("docs/articles/web-only/example-template-doc.pdf"))
hux = diamonds %>% mutate(colorCat = ifelse(color <= "G", "D-G","G-J")) %>% group_by(cut,colorCat) %>% summarise(
`Size (mean + sd)` = sprintf("%1.2f \u00B1 %1.2f",mean(carat),sd(carat)),
`Cost (mean + sd)` = sprintf("%1.0f \u00B1 %1.0f",mean(price),sd(price))
) %>% huxtable::as_hux() %>%
huxtable::theme_article() %>%
huxtable::set_all_padding(value = 0) %>%
huxtable::merge_repeated_rows()
table_1 = hux %>% roogledocs::as.long_format_table()
doc$updateTaggedTable(table_1, tableWidthInches = 4)
hux
g = ggplot(diamonds, aes(x=carat,y=price, colour=color))+geom_point()
figure_1 = roogledocs::ggplot_to_png(g, width=6, height=3)
# If the first parameter is passed as a variable and no tag is given,
# as in this example the variable name is used as the tag and the image is
# inserted into the document at the location of the tag:
doc$updateTaggedImage(figure_1)
# This is equivalent to:
# doc$updateTaggedImage(figure_1, tagName = "figure_1")
g
g2 = ggplot(diamonds, aes(x=cut,y=price, fill=cut))+
geom_violin(draw_quantiles = c(0.95,0.5,0.05))+
scale_fill_brewer()+
theme(axis.text.x = element_text(angle = 15, vjust=1,hjust=1))
filename = roogledocs::ggplot_to_png(g2, width=4, height=3)
# The figure index has to be calculated with respect to any changes that have
# already been made in the document. In this case inserting figure 1 before
# means this is inserted in the right place, but it is up to the user to make
# sure this is right.
filename %>% doc$updateFigure(figureIndex = 2)
g2
doc$uploadSupplementaryFiles(absoluteFilePath = figure_1,overwrite = TRUE)
doc$tagsDefined()
format(Sys.Date(),"%d/%m/%Y") %>% doc$updateTaggedText(tagName = "table_1_update_date")
diamonds_mean_sd = sprintf("%1.1f \u00B1 %1.1f",mean(diamonds$price),sd(diamonds$price))
# if we don't give a specific tag name then the variable name is used:
doc$updateTaggedText(diamonds_mean_sd)
doc$appendText("\nAdding new content\n","HEADING_1")
content = tibble::tribble(
~label, ~link, ~fontName, ~fontFace,
"Roogledocs", "https://terminological.github.io/roogledocs/r-library/docs/", "Courier New", "plain",
" is also able to add text at the end of the document with complex formatting. ", NA, NA, "plain",
"Supporting fonts and font face formatting such as ",  NA, NA, "plain",
"bold, ", NA, NA, "bold",
"italic ", NA, NA, "italic",
"and underlined", NA, NA, "underlined",
" amongst other things.\n\n", NA, NA, "plain"
)
doc$appendFormattedParagraph(content)
content
doc$updateCitations(here::here("vignettes/web-only/test.bib"), citationStyle = "journal-of-infection")
doc$saveAsPdf(here::here("docs/articles/web-only/example-after-update.pdf"))
pkgdown::build_site()
knitr::opts_chunk$set(
echo = TRUE,
collapse = TRUE
)
suppressWarnings(library(tidyverse))
suppressWarnings(library(huxtable))
# devtools::load_all("~/Git/roogledocs/")
here::i_am("vignettes/web-only/roogledocs.Rmd")
# There is a global flag to disable `roogledocs` in case you want to develop and
# test offline.
options('roogledocs.disabled'=FALSE)
# roogledocs stores an authentication token on your local hard drive.
options("roogledocs.tokenDirectory"="~/.roogledocs-test")
J = roogledocs::JavaApi$get(logLevel = "WARN")
x = J$RoogleDocs$new()
knitr::opts_chunk$set(
echo = TRUE,
collapse = TRUE
)
suppressWarnings(library(tidyverse))
suppressWarnings(library(huxtable))
# devtools::load_all("~/Git/roogledocs/")
here::i_am("vignettes/web-only/roogledocs.Rmd")
remove.packages("roogledocs")
devtools::install_local("~/Git/roogledocs",upgrade = FALSE)
knitr::opts_chunk$set(
echo = TRUE,
collapse = TRUE
)
suppressWarnings(library(tidyverse))
suppressWarnings(library(huxtable))
# devtools::load_all("~/Git/roogledocs/")
here::i_am("vignettes/web-only/roogledocs.Rmd")
# There is a global flag to disable `roogledocs` in case you want to develop and
# test offline.
options('roogledocs.disabled'=FALSE)
# roogledocs stores an authentication token on your local hard drive.
options("roogledocs.tokenDirectory"="~/.roogledocs-test")
J = roogledocs::JavaApi$get(logLevel = "WARN")
x = J$RoogleDocs$new()
